<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alchemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5002</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Alchemy station
global.alchemy = false;
number_of_ingredients = 3; //In Inventory.sav (don't count 0!)
alch_loop_stop = false;
create_only_once = true;
global.alch1 = 0;
global.alch2 = 0;
global.alch_slot_1 = false;
global.alch_slot_2 = false;
global.alch_slot_3 = false;
global.alch_slot_4 = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Forced close alchemy
if (room == Menu or room == First_loading)
{
    global.alchemy = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!room == Menu)
{   
    //Alchemy
    if (global.alchemy == true)
    {
        if (alch_loop_stop == false)
        {
            global.alch_amount[global.alch2] = 0;
            global.alch_amount[global.alch1] = 0;
            global.alch_object[global.alch2] = "spr_aim";
            global.alch_object[global.alch1] = "spr_aim";
            global.alch1 = 1000; //Start
            global.alch2 = 0;
            repeat(number_of_ingredients)
            {
                //Ingredient index
                scr_inventory_item_info();
                global.AlchObject = Object[global.alch1];
                
                //Ingredient description
                scr_inventory_item_info();
                global.AlchDescription = string(Descr[global.alch1]);
                
                //Ingredient amount
                ini_open("Inventory.sav");
                global.AlchAmount = ini_read_real("Save1",string(global.alch1),"0");
                ini_close();
                
                if (not round(real(global.AlchAmount)) == 0)
                {                   
                    global.alch_object[global.alch1] = global.AlchObject;
                    global.alch_description[global.alch1] = global.AlchDescription;
                    global.alch_amount[global.alch1] = round(global.AlchAmount);
                    
                    //Draw
                    global.alch_object[global.alch2] = global.alch_object[global.alch1];
                    global.alch_description[global.alch2] = global.alch_description[global.alch1];
                    global.alch_amount[global.alch2] = global.alch_amount[global.alch1];
                    
                    global.alch2 += 1;
                }
                else
                {
                    //Forced delete ingredient if amount = 0 (while making potions)
                    if (instance_exists(global.AlchObject))
                    {
                        global.alch_amount[(global.AlchObject).number] = 0;
                    }
                }
                global.alch1 += 1;
            }
            global.alch_count = global.alch2; 
        }
        var y1, y2;
        y1 = 110;
        y2 = 110;
        alch_loop_stop = true;
        if (global.alch_count &gt; 0)
        {
            if (alch_page_update == true)
            {
                global.alch_end_count = 8; //Limit of list
                global.alch_start_count = 0; //First item number
                if (global.alch_count &gt; 8)
                {
                    if ((global.alch_count - ((global.alchemy_page+1)*8)) &gt; 0 and global.alchemy_page == 0)
                    {
                        global.alch_start_count = 0;
                        global.alch_end_count = 8;
                        
                    }
                    else if ((global.alch_count - ((global.alchemy_page+1)*8)) &gt; 0 and
                            global.alchemy_page &gt; 0)
                    {
                        global.alch_start_count = (global.alchemy_page*8);
                        global.alch_end_count = ((global.alchemy_page*8)*2);
                    }
                    else
                    {
                        global.alch_start_count = (global.alchemy_page*8);
                        global.alch_end_count = global.alch_count;
                    }
                }
                else
                {
                    global.alch_end_count = global.alch_count;
                    global.alch_start_count = 0;
                }
                global.alch_page_update = false;
            }
            for (global.alch2 = global.alch_start_count; global.alch2 &lt; global.alch_end_count; global.alch2++;)
            {
                //Igredient background
                draw_sprite(spr_inv_item_bg, 0,view_xview+30, view_yview+7+y1);               
                //Igredient description background
                draw_sprite(spr_inv_item_description_bg, 0,view_xview+120, view_yview+7+y1);
                //Create objects on the list
                if (create_only_once == true)
                {
                    scr_inventory_item_info();
                    for (global.alch2 = global.alch_start_count; global.alch2 &lt; global.alch_end_count; global.alch2++;)
                    {
                        //Ingredients
                        instance_create(view_xview+30, view_yview+7+y2, Object[global.alch2])
                        y2 += 19;
                    }
                    create_only_once = false;
                }
                //Igredient description
                draw_text_color(view_xview+55,view_yview+y1, string(global.alch_description[global.alch2]),
                                c_black, c_black, c_black, c_black, 1);
                //Igredient amount background
                draw_sprite(spr_inv_item_amount_bg, 0,view_xview+228, view_yview+7+y1);
                //Igredient amount
                draw_text_color(view_xview+207,view_yview+y1, string(global.alch_amount[global.alch2]),
                                c_black, c_black, c_black, c_black, 1);
                y1 += 19;
            }
        }
        else
        {
            //If empty
            draw_text_color(view_xview+30, view_yview+117, "You don't have any ingredients...",
                                c_black, c_black, c_black, c_black, 1);
        }  
        //Alchemy station
        draw_text_color(view_xview+20,view_yview+60, "Alchemy station",
                        c_black, c_black, c_black, c_black, 1);
        //Page number background
        draw_sprite(spr_inv_item_description_bg, 0,view_xview+87, view_yview+95);
        //Page number max
        global.alchemy_page_max = (round(global.alch_count/8));
        if ((global.alchemy_page_max - (global.alch_count/8)) &lt; 0 )
        {   
            global.alchemy_page_max += 1;
        }
        //Draw page number and max
        draw_text_color(view_xview+20,view_yview+87, 
                        string("PAGE: " + string(global.alchemy_page + 1) + "       / " + string(global.alchemy_page_max)),
                        c_black, c_black, c_black, c_black, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
