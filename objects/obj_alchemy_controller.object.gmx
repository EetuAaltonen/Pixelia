<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alchemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5002</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Forge
last_order_number_of_ingredients = 999; //In Inventory.sav (don't count 0!)
alch1 = 0;
alch2 = 0;
alch_page = 0;

update_amounts = true; //Update amounts in list
update_list = true;
create_once = true; //Create objects once on the list

//Highlights off
global.alch_slot_1 = false;
global.alch_slot_2 = false;
global.alch_slot_3 = false;
global.alch_slot_4 = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Alchemy
if (global.hud_state == "alchemy")
{
    if (update_list == true)
    {
        if (update_amounts == true)
        {
            alch_amount_draw[alch2] = 0;
            alch_amount[alch1] = 0;
            alch_object_draw[alch2] = "spr_aim";
            alch_object[alch1] = "spr_aim";
            alch1 = 1; //Start
            alch2 = 0;
            for(alch1 = 1; alch1 &lt; (last_order_number_of_ores + 1); alch1++)
            { 
                //Ingredient amount
                ini_open("Inventory.sav");
                AlchAmount = ini_read_real("Save1",string(alch1),-1);
                ini_close();
                
                //Ingredient object
                scr_inventory_item_info();
                AlchObject = Object[alch1];
                
                if (not round(real(AlchAmount)) == 0)
                {                      
                    //Ingredient description
                    scr_inventory_item_info();
                    AlchDescription = string(Descr[alch1]);    
                
                    alch_object[alch1] = AlchObject;
                    alch_description[alch1] = AlchDescription;
                    alch_amount[alch1] = round(AlchAmount);
                    
                    //Draw
                    alch_object_draw[alch2] = alch_object[alch1];
                    alch_description_draw[alch2] = alch_description[alch1];
                    alch_amount_draw[alch2] = alch_amount[alch1];
                    
                    alch2 += 1;
                }
                else if (AlchAmount == -1)
                {
                    //alch1 = (last_order_number_of_ores + 1);
                    break;
                }
                else
                {
                    //Forced delete Ingredient if amount = 0 (while making potions)
                    if (instance_exists(AlchObject))
                    {
                        alch_amount[(AlchObject).number] = 0;
                    }
                }
            }
            alch_count = alch2;
            update_amounts = false;
        }
    }
    update_list = false;
    
    //Draw everything
    var y1, y2;
    y1 = 110;
    y2 = 110;
    if (alch_count &gt; 0)
    {
        alch_end_count = 8; //Limit of list
        alch_start_count = 0; //First item number
        if (alch_count &gt; 8)
        {
            if ((alch_count - ((alch_page+1)*8)) &gt; 0 and alch_page == 0)
            {
                alch_start_count = 0;
                alch_end_count = 8;
                
            }
            else if ((alch_count - ((alch_page+1)*8)) &gt; 0 and
                    alch_page &gt; 0)
            {
                alch_start_count = (alch_page*8);
                alch_end_count = ((alch_page*8)*2);
            }
            else
            {
                alch_start_count = (alch_page*8);
                alch_end_count = alch_count;
            }
        }
        else
        {
            alch_end_count = alch_count;
            alch_start_count = 0;
        }
        if (create_once == true)
        {
            for (alch2 = alch_start_count; alch2 &lt; alch_end_count; alch2++;)
            {
                //Ingredients
                instance_create(view_xview+30, view_yview+7+y2, alch_object_draw[alch2])
                y2 += 19;
            }
            create_once = false;
        }
        for (alch2 = alch_start_count; alch2 &lt; alch_end_count; alch2++;)
        {
            //Ingredient background
            draw_sprite(spr_inv_item_bg, 0,view_xview+30, view_yview+7+y1);               
            //Ingredient description background
            draw_sprite(spr_inv_item_description_bg, 0,view_xview+120, view_yview+7+y1);
            //Create objects on the list
            //Ingredient description
            draw_text_color(view_xview+55,view_yview+y1, string(alch_description_draw[alch2]),
                            c_black, c_black, c_black, c_black, 1);
            //Ingredient amount background
            draw_sprite(spr_inv_item_amount_bg, 0,view_xview+228, view_yview+7+y1);
            //Ingredient amount
            draw_text_color(view_xview+207,view_yview+y1, string(alch_amount_draw[alch2]),
                            c_black, c_black, c_black, c_black, 1);
            y1 += 19;
        }
    }
    else
    {
        //If empty
        draw_text_color(view_xview+30, view_yview+117, "You don't have any ores...",
                            c_black, c_black, c_black, c_black, 1);
    }
    //alchemy
    draw_text_color(view_xview+20,view_yview+60, "alchemy",
                    c_black, c_black, c_black, c_black, 1);
    //Page number background
    draw_sprite(spr_inv_item_description_bg, 0,view_xview+87, view_yview+95);
    //Page number max
    alch_page_max = (round(alch_count/8));
    if ((alch_page_max - (alch_count/8)) &lt; 0 )
    {   
        alch_page_max += 1;
    }
    //Draw page number and max
    draw_text_color(view_xview+20,view_yview+87, 
                    string("PAGE: " + string(alch_page + 1) + "       / " + string(alch_page_max)),
                    c_black, c_black, c_black, c_black, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
