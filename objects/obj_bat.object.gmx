<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.2;
hspeed = 1;
vspeed = 0;
alarm[1] = random_range(30, 150);

//Stats generator
def = 0;
str = 0;
mag = 0;

def_ = 0;
str_ = 0;
mag_ = 0;

rand = random_range(1, 200);
if (rand &lt; 10 )
{
    str_ = 1;
}
else if (rand &gt;= 10 and rand &lt;= 20)
{
    def_ = 1;
}
else if (rand &gt; 20 and rand &lt; 30)
{
    mag_ = 1; 
}

//Strength
str = 1 + str_;

//Defence
def = 1 + def_;

//Magic
mag = 1 + mag_;

//Stats draw
state = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hspeed *= -1;
vspeed = 0;
alarm[1] = random_range(30, 150);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_stone">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hspeed *= -1;
vspeed = 0;
alarm[1] = random_range(30, 150);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_lights">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hspeed *= -1;
vspeed = 0;
alarm[1] = random_range(30, 150);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

//Font
draw_set_font(fnt_enemies_stats);
    
if (distance_to_point(obj_pelaaja.x, obj_pelaaja.y) &lt; 60 and state == 0)
{
    
    if (global.enemy_stats1 == 0)
    {
        //State
        global.enemy_stats1 = 1; 
        state = global.enemy_stats1;
        
        //Draw stats background
        draw_sprite_ext(spr_enemies_stats, image_index, view_xview+140,
                    view_yview+3, image_xscale, image_yscale, 
                    image_angle, c_white, 0.7);
                    
        //Draw stats picture
        draw_sprite_ext(spr_bat, image_index, view_xview+155,
                    view_yview+10, image_xscale, image_yscale, 
                    image_angle, c_white, image_alpha);
        
        //Draw strength
        var str_draw;
        str_draw = str;
        if (str &gt; 1)
        {       
            draw_text_color(view_xview+190, view_yview+2, string(str),
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
            draw_text_color(view_xview+175, view_yview+2, "S:",
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
        }
        else
        {
            draw_text(view_xview+190, view_yview+2, string(str));
            draw_text(view_xview+175, view_yview+2, "S: ");
        }
        
        //Draw defence
        var def_draw;
        def_draw = def;
        if (def &gt; 1)
        {
            draw_text_color(view_xview+220, view_yview+2, string(def),
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
            draw_text_color(view_xview+205, view_yview+2, "D:",
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
        }
        else
        {
            draw_text(view_xview+220, view_yview+2, string(def));
            draw_text(view_xview+205, view_yview+2, "D:");
        }
        
        //Draw magic
        var mag_draw;
        mag_draw = mag;    
        if (mag &gt; 1)
        {
            draw_text_color(view_xview+250, view_yview+2, string(mag),
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
            draw_text_color(view_xview+235, view_yview+2, "M:",
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
        }
        else
        {
            draw_text(view_xview+250, view_yview+2, string(mag));
            draw_text(view_xview+235, view_yview+2, "M:");
        }
    }
    else if (global.enemy_stats2 == 0)
    {
        //State
        global.enemy_stats2 = 1;
        state = global.enemy_stats2;
        
        //Draw stats background
        draw_sprite_ext(spr_enemies_stats, image_index, view_xview+140,
                    view_yview+17, image_xscale, image_yscale, 
                    image_angle, c_white, 0.7);
                    
        //Draw stats picture
        draw_sprite_ext(spr_bat, image_index, view_xview+155,
                    view_yview+24, image_xscale, image_yscale, 
                    image_angle, c_white, image_alpha);
        
        //Draw strength
        var str_draw;
        str_draw = str;
        if (str &gt; 1)
        {       
            draw_text_color(view_xview+190, view_yview+16, string(str),
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
            draw_text_color(view_xview+175, view_yview+16, "S:",
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
        }
        else
        {
            draw_text(view_xview+190, view_yview+16, string(str));
            draw_text(view_xview+175, view_yview+16, "S: ");
        }
        
        //Draw defence
        var def_draw;
        def_draw = def;
        if (def &gt; 1)
        {
            draw_text_color(view_xview+220, view_yview+16, string(def),
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
            draw_text_color(view_xview+205, view_yview+16, "D:",
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
        }
        else
        {
            draw_text(view_xview+220, view_yview+16, string(def));
            draw_text(view_xview+205, view_yview+16, "D:");
        }
        
        //Draw magic
        var mag_draw;
        mag_draw = mag;    
        if (mag &gt; 1)
        {
            draw_text_color(view_xview+250, view_yview+16, string(mag),
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
            draw_text_color(view_xview+235, view_yview+16, "M:",
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
        }
        else
        {
            draw_text(view_xview+250, view_yview+16, string(mag));
            draw_text(view_xview+235, view_yview+16, "M:");
        }
    }
    else if (global.enemy_stats3 == 0)
    {
        //State
        global.enemy_stats3 = 1;
        state = global.enemy_stats3;   
    
        //Draw stats background
        draw_sprite_ext(spr_enemies_stats, image_index, view_xview+140,
                    view_yview+24, image_xscale, image_yscale, 
                    image_angle, c_white, 0.7);
                    
        //Draw stats picture
        draw_sprite_ext(spr_bat, image_index, view_xview+155,
                    view_yview+24, image_xscale, image_yscale, 
                    image_angle, c_white, image_alpha);
        
        //Draw strength
        var str_draw;
        str_draw = str;
        if (str &gt; 1)
        {       
            draw_text_color(view_xview+190, view_yview+16, string(str),
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
            draw_text_color(view_xview+175, view_yview+16, "S:",
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
        }
        else
        {
            draw_text(view_xview+190, view_yview+16, string(str));
            draw_text(view_xview+175, view_yview+16, "S: ");
        }
        
        //Draw defence
        var def_draw;
        def_draw = def;
        if (def &gt; 1)
        {
            draw_text_color(view_xview+220, view_yview+16, string(def),
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
            draw_text_color(view_xview+205, view_yview+16, "D:",
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
        }
        else
        {
            draw_text(view_xview+220, view_yview+16, string(def));
            draw_text(view_xview+205, view_yview+16, "D:");
        }
        
        //Draw magic
        var mag_draw;
        mag_draw = mag;    
        if (mag &gt; 1)
        {
            draw_text_color(view_xview+250, view_yview+16, string(mag),
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
            draw_text_color(view_xview+235, view_yview+16, "M:",
            c_yellow, c_yellow, c_yellow, c_yellow, 1);
        }
        else
        {
            draw_text(view_xview+250, view_yview+16, string(mag));
            draw_text(view_xview+235, view_yview+16, "M:");
        }
    }
}
else if (state == 1)
{
    if (state == global.enemy_stats1)
    {
        global.enemy_stats1 = 0;
        state = 0;
    }
    else if (state == global.enemy_stats2)
    {
        global.enemy_stats2 = 0;
        state = 0;
    }
    else if (state == global.enemy_stats3)
    {
        global.enemy_stats3 = 0;
        state = 0;
    }
    else if (state == global.enemy_stats4)
    {
        global.enemy_stats4 = 0;
        state = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
