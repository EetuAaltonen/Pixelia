<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_crafting_table</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5002</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Workbench
global.workbench = false;
number_of_ores = 2; //In Inventory.sav (don't count 0!)
workb_loop_stop = false;
create_only_once = true;
workb1 = 0;
workb2 = 0;
global.workb_slot_1 = false;
global.workb_slot_2 = false;
global.workb_slot_3 = false;
global.workb_slot_4 = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Forced close workbench
if (room == Menu or room == First_loading)
{
    global.workbench = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!room == Menu)
{   
    //workbench
    if (global.workbench == true)
    {
        if (workb_loop_stop == false)
        {
            workb_amount[workb2] = 0;
            workb_amount[workb1] = 0;
            workb_object[workb2] = "spr_aim";
            workb_object[workb1] = "spr_aim";
            workb1 = 1; //Start
            workb2 = 0;
            repeat(number_of_ores)
            {
                //Material index
                scr_inventory_item_info();
                workbObject = Object[workb1];
                
                //Material description
                scr_inventory_item_info();
                workbDescription = string(Descr[workb1]);
                
                //Material amount
                ini_open("Inventory.sav");
                workbAmount = ini_read_real("Save1",string(workb1),"0");
                ini_close();
                
                if (not round(real(workbAmount)) == 0)
                {                   
                    workb_object[workb1] = workbObject;
                    workb_description[workb1] = workbDescription;
                    workb_amount[workb1] = round(workbAmount);
                    
                    //Draw
                    workb_object[workb2] = workb_object[workb1];
                    workb_description[workb2] = workb_description[workb1];
                    workb_amount[workb2] = workb_amount[workb1];
                    
                    workb2 += 1;
                }
                else
                {
                    //Forced delete Material if amount = 0 (while making potions)
                    if (instance_exists(workbObject))
                    {
                        workb_amount[(workbObject).number] = 0;
                    }
                }
                workb1 += 1;
            }
            workb_count = workb2; 
        }
        var y1, y2;
        y1 = 110;
        y2 = 110;
        alch_loop_stop = true;
        if (workb_count &gt; 0)
        {
            if (workb_page_update == true)
            {
                workb_end_count = 8; //Limit of list
                workb_start_count = 0; //First item number
                if (workb_count &gt; 8)
                {
                    if ((workb_count - ((workb_page+1)*8)) &gt; 0 and workb_page == 0)
                    {
                        workb_start_count = 0;
                        workb_end_count = 8;
                        
                    }
                    else if ((workb_count - ((workb_page+1)*8)) &gt; 0 and
                            workb_page &gt; 0)
                    {
                        workb_start_count = (workb_page*8);
                        workb_end_count = ((workb_page*8)*2);
                    }
                    else
                    {
                        workb_start_count = (workb_page*8);
                        workb_end_count = workb_count;
                    }
                }
                else
                {
                    workb_end_count = workb_count;
                    workb_start_count = 0;
                }
                global.alch_page_update = false;
            }
            for (workb2 = workb_start_count; workb2 &lt; workb_end_count; workb2++;)
            {
                //Material background
                draw_sprite(spr_inv_item_bg, 0,view_xview+30, view_yview+7+y1);               
                //Material description background
                draw_sprite(spr_inv_item_description_bg, 0,view_xview+120, view_yview+7+y1);
                //Create objects on the list
                if (create_only_once == true)
                {
                    for (workb2 = workb_start_count; workb2 &lt; workb_end_count; workb2++;)
                    {
                        //Materials
                        instance_create(view_xview+30, view_yview+7+y2, workb_object[workb2])
                        (workb_object[workb2]).amount = workb_amount[workb2];
                        y2 += 19;
                    }
                    create_only_once = false;
                }
                //Material description
                draw_text_color(view_xview+55,view_yview+y1, string(workb_description[workb2]),
                                c_black, c_black, c_black, c_black, 1);
                //Material amount background
                draw_sprite(spr_inv_item_amount_bg, 0,view_xview+228, view_yview+7+y1);
                //Material amount
                draw_text_color(view_xview+207,view_yview+y1, string(workb_amount[workb2]),
                                c_black, c_black, c_black, c_black, 1);
                y1 += 19;
            }
            //Workbench
            draw_text_color(view_xview+20,view_yview+60, "Workbench",
                            c_black, c_black, c_black, c_black, 1);
            //Page number background
            draw_sprite(spr_inv_item_description_bg, 0,view_xview+87, view_yview+95);
            //Page number max
            workb_page_max = (round(workb_count/8));
            if ((workb_page_max - (workb_count/8)) &lt; 0 )
            {   
                workb_page_max += 1;
            }
            //Draw page number and max
            draw_text_color(view_xview+20,view_yview+87, 
                            string("PAGE: " + string(workb_page + 1) + "       / " + string(workb_page_max)),
                            c_black, c_black, c_black, c_black, 1);
        }
        else
        {
            //If empty
            draw_text_color(view_xview+30, view_yview+117, "Inventory is empty...",
                                c_black, c_black, c_black, c_black, 1);
        }  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
