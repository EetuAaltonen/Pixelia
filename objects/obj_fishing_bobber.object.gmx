<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fishing_bobber</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-102</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create attributes
inWater = false;
catchFish = false;
toPlayer = false;

bobberX = 20;
bobberSpeed = 1;
bobberDirection = 1;
bobberRotateDirection = 1;
bobberRotateSpeed = 2;
bobberTempImageAngle = image_angle;
imageAngle = bobberTempImageAngle;

viewXCenter = view_xview + view_wview/2;
viewYCenter = view_yview + view_hview/2;

//
area1Xscale = 10;
catchChange = 0;

//Inventory info
typeId = 4;
itemId = random_range(1,3);

depth_ = depth;
alarm[3] = random_range(100, 200);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image angle
imageAngle += (1 * bobberRotateDirection);
alarm[6] = bobberRotateSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action state to null
catchFish = false;
if (instance_exists(obj_player))
{
    toPlayer = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase / Decrease bobber x position
if (bobberSpeed &gt; 0)
{    
    bobberX += (2 * bobberDirection);
    alarm[4] = bobberSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Catch fish
catchFish = true;
show_message("Be ready!");
alarm[4] = bobberSpeed;
alarm[6] = bobberRotateSpeed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y += 1;
alarm[1] = random_range(50, 80);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y -= 1;
alarm[2] = random_range(50, 80);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bobber movement
if ((viewXCenter + bobberX) &gt; (viewXCenter + (210/2)) &amp;&amp; bobberDirection == 1)
{
    bobberDirection = -1;
    bobberX -= 2;
    alarm[4] = bobberSpeed;
}
else if ((viewXCenter+ bobberX) &lt; (viewXCenter - (210/2)) &amp;&amp; bobberDirection == -1)
{
    bobberDirection = 1;
    bobberX += 2;
    alarm[4] = bobberSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bobber image angle
if (imageAngle &gt; 15 &amp;&amp;
    bobberRotateDirection == 1)
{
    imageAngle -= 1;
    bobberRotateDirection = -1;
    alarm[6] = bobberRotateSpeed;
}
else if (imageAngle &lt; -15 &amp;&amp;
    bobberRotateDirection == -1)
{
    imageAngle += 1;
    bobberRotateDirection = 1;
    alarm[6] = bobberRotateSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fly to water
if (inWater == false)
{
    move_towards_point((instance_nearest(x, y, obj_fishing_vein)).x,
                       ((instance_nearest(x, y, obj_fishing_vein)).y - 
                       distance_to_object(instance_nearest(x, y, obj_fishing_vein))), 2); 
    if (distance_to_object(obj_fishing_vein) &lt; 1)
    {
        hspeed = 0;
        vspeed = 0;
        inWater = true;
        //Time to fishing minigame
        //Time to spawn a fish
        //obj_fishing_vein.alarm[1] = (round(random(300)) + 300);
        //Animation
        alarm[1] = round(random_range(50, 80));
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fly to player
if (toPlayer == true)
{
    move_towards_point(obj_player.x, obj_player.y - (distance_to_object(obj_player)/3), 3); 
    if (distance_to_object(obj_player) &lt; 1)
    {
        hspeed = 0;
        vspeed = 0;
        var rndNumber = random_range(0.01, 1);
        show_message(string(rndNumber) + "&lt;" + string(catchChange));
        if (rndNumber &lt; catchChange)
        {
            //Instance create dropped item
            sprite_index_item = spr_icon_salmon;
            instance_create(x, y, obj_dropped_item);
            (instance_nearest(x, y, obj_dropped_item)).sprite_index = sprite_index_item;
            (instance_nearest(x, y, obj_dropped_item)).typeId = typeId;
            (instance_nearest(x, y, obj_dropped_item)).get_attributes = true;
        }
        scr_plr_set_action_state_null();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instance destroy
if not(obj_player.action_state == "fishing")
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw fishing line
draw_self();
var targetX, targetY;
if (instance_exists(obj_player))
{
    if (obj_player.image_xscale == 1)
    {
        targetX = obj_player.x + 9;
        targetY = obj_player.y - 7;
    }
    else
    {
        targetX = obj_player.x - 9;
        targetY = obj_player.y - 7;
    }
}
else
{
    instance_destroy();
}
draw_line_colour(x, y-4, targetX, targetY, c_gray, c_gray);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Catching fish
draw_self();
if (catchFish)
{
    depth = -4999;
    draw_sprite(spr_fishing_mini_game_bg, 0, viewXCenter, viewYCenter);
    draw_sprite_ext(spr_fishing_mini_game_area_2, 0, viewXCenter - (area1Xscale/2*4), viewYCenter, area1Xscale*4, 1, 0, c_white, 1);
    draw_sprite_ext(spr_fishing_mini_game_area_1, 0, viewXCenter - area1Xscale/2, viewYCenter, area1Xscale, 1, 0, c_white, 1);
    draw_sprite_ext(spr_fishing_bobber, 0, viewXCenter + bobberX, viewYCenter, 3, 3, imageAngle, c_white, 1);
    draw_text(viewXCenter + bobberX, viewYCenter - 20,string(imageAngle));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop bobber
bobberSpeed = 0;
if ((viewXCenter + bobberX) &lt; viewXCenter + (area1Xscale/2) &amp;&amp;
    (viewXCenter + bobberX) &gt; viewXCenter - (area1Xscale/2))
{
    catchChange = 1;
}
else if ((viewXCenter + bobberX) &lt; (viewXCenter + (area1Xscale/2*4)) &amp;&amp;
        (viewXCenter + bobberX) &gt; (viewXCenter - (area1Xscale/2*4)))
{
    catchChange = 0.5;
}
else
{
    catchChange = 0.02;
}

alarm[5] = 100;
alarm[6] = -1;
imageAngle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
