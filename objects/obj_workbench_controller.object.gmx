<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_crafting_table</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5002</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*//Read saved ini
search_id = "mater";

update_amounts = true; //Update amounts in list
update_list = true;
createOnce = true; //Create objects once on the list
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*//Font
draw_set_font(fnt_inventory_text);
draw_set_color(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

//Forge
if (global.hudState == "forge")
{
    if (update_list == true)
    {
        if (update_amounts == true)
        {
            //Better code
            item_count = 0;
            search_id = "mater";
            i = 0;
            
            ini_open("Inventory.sav");
            for(itemId = 1; itemId &lt; 101; itemId++)
            {
                //Change category
                if (itemId == 100)
                {
                    break;
                }
                key = search_id + "[" + string(itemId) + "]";
                //Item amount
                item_amount[1,itemId] = ini_read_real("Save1", key, -1);
                
                //Check if item amount &gt; 0
                if (round(item_amount[1,itemId]) &gt; 0)
                {
                    //Item
                    scr_inventory_item_info();
                    material[1,itemId] = Object[1,itemId];
                    
                    //Item description
                    item_description[1,itemId] = string(Descr[1,itemId]);
                    
                    //Item amount is top of for loop
                    
                    //Draw
                    material_create[i] = material[1,itemId];
                    description_draw[i] = item_description[1,itemId];
                    amount_draw[i] = item_amount[1,itemId];
                    
                    item_count += 1;
                    i += 1;
                }
            }
        }
        ini_close();
        update_amounts = false;
    }
    if (item_count &gt; 0)
    {
        if (pageUpdate == true)
        {
            size_of_list = 8; //Limit of list
            start_count = 0; //First item
            if (item_count &gt; 8)
            {                       //This have to be set!
                if ((item_count - ((forge_page+1)*8)) &gt; 0 and forge_page == 0)
                {
                    start_count = 0;
                    end_count = 8;
                    
                }
                else if ((item_count - ((forge_page+1)*8)) &gt; 0 and
                        forge_page &gt; 0)
                {
                    start_count = (forge_page*8);
                    end_count = ((forge_page*8)*2);
                }
                else
                {
                    start_count = (forge_page*8);
                    end_count = item_count;
                }
            }
            else
            {
                end_count = item_count;
                start_count = 0;
            }
            pageUpdate = false;
            createOnce = true;
        }
        var y_pos; //y position
        y_pos = 110;
        if (createOnce == true)
        {
            for (i = start_count; i &lt; end_count; i++;)
            {
                //Materials
                instance_create(view_xview+30, view_yview+y_pos, material_create[i])
                y_pos += 19;
            }
            createOnce = false;
            y_pos = 110;
        }
        for (i = start_count; i &lt; end_count; i++;)
        {
            //Material background
            draw_sprite(spr_inv_item_bg, 0,view_xview+30, view_yview+y_pos);               
            //Material description background
            draw_sprite(spr_inv_item_description_bg, 0,view_xview+120, view_yview+y_pos);
            //Material description
            draw_text(view_xview+56,view_yview+y_pos, string(description_draw[i]));
            //Material amount background
            draw_sprite(spr_inv_item_amount_bg, 0,view_xview+228, view_yview+y_pos);
            //Material amount
            draw_text(view_xview+207,view_yview+y_pos, string(amount_draw[i]));
            y_pos += 19;
        }
    }
    else
    {
        //If empty
        draw_text_color(view_xview+30, view_yview+117, "You don't have any ores...",
                            c_black, c_black, c_black, c_black, 1);
    }
    //Forge
    draw_text(view_xview+23,view_yview+65, "Forge");
    //Page number background
    draw_sprite(spr_inv_item_description_bg, 0,view_xview+87, view_yview+87);
    //Page number max
    forge_page_max = (round(item_count/8));
    if ((forge_page_max - (item_count/8)) &lt; 0 )
    {   
        forge_page_max += 1;
    }
    //Draw page number and max
    draw_text(view_xview+23,view_yview+87, string("PAGE:    " + string(forge_page + 1) + "  /  " + string(forge_page_max)));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
